<?php namespace Peakfijn\GetSomeRest\Http;

use Illuminate\Http\Response as IlluminateResponse;
use Peakfijn\GetSomeRest\Contracts\Encoder;
use Peakfijn\GetSomeRest\Contracts\Mutator;
use Peakfijn\GetSomeRest\Contracts\RestException;
use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
use Symfony\Component\HttpFoundation\Request;

class Response extends IlluminateResponse {

	/**
	 * The exception if the response is actually an exception.
	 * 
	 * @var HttpExceptionInterface
	 */
	protected $exception;

	/**
	 * Finalize the response by mutating & encoding the "original" content.
	 *
	 * @param  \PEakfijn\GetSomeRest\Contracts\Mutator $mutator
	 * @param  \Peakfijn\GetSomeRest\Contracts\Encoder $encoder
	 * @param  \Symfony\Component\HttpFoundation\Request $request
	 * @return \Peakfijn\GetSomeRest\Http\Request
	 */
	public function finalize( Mutator $mutator, Encoder $encoder, Request $request )
	{
		$content = $mutator->getContent($this,    $request);
		$content = $encoder->getContent($content, $request);

		$this->setContent($content);
		$this->headers->set('content-type', $encoder->getContentType());

		return $this;
	}

	/**
	 * Get the status text.
	 * It will be generated by the status code.
	 * 
	 * @return string
	 */
	public function getStatusText()
	{
		return $this->statusText;
	}

	/**
	 * Attach an exception to the response.
	 * 
	 * @param HttpExceptionInterface $exception
	 */
	public function setException( HttpExceptionInterface $exception )
	{
		$this->exception = $exception;
	}

	/**
	 * Check if the response has an exception.
	 * 
	 * @return boolean 
	 */
	public function hasException()
	{
		return !empty($this->exception);
	}

	/**
	 * Get the exception attached to this response.
	 * 
	 * @return HttpExceptionInterface
	 */
	public function getException()
	{
		return $this->exception;
	}

	/**
	 * Create a new response from an existing Illuminate response.
	 * 
	 * @param  Illuminate\Http\Response $response
	 * @return \Peakfijn\GetSomeRest\Http\Response
	 */
	public static function makeFromExisting( IlluminateResponse $response )
	{
		return new static(
			$response->getOriginalContent(),
			$response->getStatusCode(),
			$response->headers->all()
		);
	}

	/**
	 * Create a new response from an exception.
	 * 
	 * @param  Symfony\Component\HttpKernel\Exception\HttpExceptionInterface $exception
	 * @return \Peakfijn\GetSomeRest\Http\Response
	 */
	public static function makeFromException( HttpExceptionInterface $exception )
	{
		$content = '';

		if( $exception instanceof RestException )
		{
			$content = $exception->getContent();
		}

		$response = new static(
			$content,
			$exception->getStatusCode(),
			$exception->getHeaders()
		);

		$response->setException($exception);

		return $response;
	}

}